{"ast":null,"code":"import TotalTimeType from './TotalTime.type';\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { startTask, startRemainder } from '../task/Task.action';\nimport { startCountDown, updateLastRunSec } from '../totalTime/TotalTime.action';\nimport { GetDate, GetTimeInSeconds } from '../../logic/getDate';\nimport { submitDataStart } from '../submitData/SubmitData.action';\nimport { notify } from '../../components/remainderNotification/RemainderNotification.component';\n\nfunction* updateCountDown() {\n  var d = new Date(); // for now\n\n  var hr = d.getHours(); // => 9\n\n  var min = d.getMinutes(); // =>  30\n\n  var sec = d.getSeconds();\n  const {\n    key,\n    countDownProgress,\n    originalTime,\n    lastUpdatedTime\n  } = yield select(state => state.TotalTimeReducer);\n  const taskReducer = yield select(state => state.TaskReducer); //console.log(taskReducer)\n  //If the time is 23:59:58, it will save all task. as we are using the key to identify time ofter 00:00:00 key will change, hence breaking the function\n\n  if (parseInt(hr) === 23 && parseInt(min) === 59 && parseInt(sec) === 58) {\n    window.alert('The day is about to end, and a new day will begin, We will Save your progress so far');\n    yield put(submitDataStart());\n    setTimeout(function () {}, 500);\n    window.location.reload(false);\n  } else {\n    let originalTimeLocal = originalTime[key][GetDate()];\n    let seconds = GetTimeInSeconds();\n    yield put(startRemainder(seconds));\n\n    if (taskReducer.notification !== null) {\n      notify(taskReducer.notification);\n    } //updates the time of main timer as well as the tasks\n\n\n    if (countDownProgress) {\n      if (lastUpdatedTime === null) {\n        //console.log('in saga')\n        yield put(updateLastRunSec(seconds));\n        yield put(startCountDown(1));\n        yield put(startTask(taskReducer.activeTask, 1, originalTimeLocal));\n      } else {\n        let timeDiff = seconds - lastUpdatedTime;\n        yield put(updateLastRunSec(seconds));\n        yield put(startCountDown(timeDiff));\n        yield put(startTask(taskReducer.activeTask, timeDiff, originalTimeLocal));\n      }\n    }\n  }\n}\n\nexport function* startTaskTime() {\n  yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown);\n}","map":{"version":3,"sources":["/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/redux/totalTime/TotalTime.sagas.js"],"names":["TotalTimeType","takeEvery","put","select","startTask","startRemainder","startCountDown","updateLastRunSec","GetDate","GetTimeInSeconds","submitDataStart","notify","updateCountDown","d","Date","hr","getHours","min","getMinutes","sec","getSeconds","key","countDownProgress","originalTime","lastUpdatedTime","state","TotalTimeReducer","taskReducer","TaskReducer","parseInt","window","alert","setTimeout","location","reload","originalTimeLocal","seconds","notification","activeTask","timeDiff","startTaskTime","UPDATE_COUNTDOWN"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,MAAtB,QAAmC,oBAAnC;AACA,SAAQC,SAAR,EAAkBC,cAAlB,QAAuC,qBAAvC;AACA,SAAQC,cAAR,EAAuBC,gBAAvB,QAA8C,+BAA9C;AACA,SAAQC,OAAR,EAAgBC,gBAAhB,QAAuC,qBAAvC;AACA,SAAQC,eAAR,QAA8B,iCAA9B;AACA,SAAQC,MAAR,QAAqB,wEAArB;;AACA,UAAUC,eAAV,GAA2B;AACvB,MAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR,CADuB,CACH;;AACpB,MAAIC,EAAE,GAACF,CAAC,CAACG,QAAF,EAAP,CAFuB,CAEF;;AACrB,MAAIC,GAAG,GAACJ,CAAC,CAACK,UAAF,EAAR,CAHuB,CAGC;;AACxB,MAAIC,GAAG,GAACN,CAAC,CAACO,UAAF,EAAR;AACA,QAAM;AAACC,IAAAA,GAAD;AAAKC,IAAAA,iBAAL;AAAuBC,IAAAA,YAAvB;AAAoCC,IAAAA;AAApC,MAAqD,MAAMrB,MAAM,CAACsB,KAAK,IAAEA,KAAK,CAACC,gBAAd,CAAvE;AACA,QAAMC,WAAW,GAAC,MAAMxB,MAAM,CAACsB,KAAK,IAAEA,KAAK,CAACG,WAAd,CAA9B,CANuB,CAOvB;AACA;;AACA,MAAGC,QAAQ,CAACd,EAAD,CAAR,KAAe,EAAf,IAAqBc,QAAQ,CAACZ,GAAD,CAAR,KAAgB,EAArC,IAA2CY,QAAQ,CAACV,GAAD,CAAR,KAAgB,EAA9D,EAAiE;AAC7DW,IAAAA,MAAM,CAACC,KAAP,CAAa,sFAAb;AACA,UAAM7B,GAAG,CAACQ,eAAe,EAAhB,CAAT;AACAsB,IAAAA,UAAU,CAAC,YAAU,CAGpB,CAHS,EAGP,GAHO,CAAV;AAIAF,IAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACH,GARD,MASI;AACJ,QAAIC,iBAAiB,GAACZ,YAAY,CAACF,GAAD,CAAZ,CAAkBb,OAAO,EAAzB,CAAtB;AACA,QAAI4B,OAAO,GAAC3B,gBAAgB,EAA5B;AACA,UAAMP,GAAG,CAACG,cAAc,CAAC+B,OAAD,CAAf,CAAT;;AACA,QAAGT,WAAW,CAACU,YAAZ,KAA2B,IAA9B,EAAmC;AAC/B1B,MAAAA,MAAM,CAACgB,WAAW,CAACU,YAAb,CAAN;AACH,KANG,CAOJ;;;AACA,QAAGf,iBAAH,EAAqB;AACjB,UAAGE,eAAe,KAAG,IAArB,EAA0B;AACtB;AACA,cAAMtB,GAAG,CAACK,gBAAgB,CAAC6B,OAAD,CAAjB,CAAT;AACA,cAAMlC,GAAG,CAACI,cAAc,CAAC,CAAD,CAAf,CAAT;AAEA,cAAMJ,GAAG,CAACE,SAAS,CAACuB,WAAW,CAACW,UAAb,EAAwB,CAAxB,EAA0BH,iBAA1B,CAAV,CAAT;AACH,OAND,MAOI;AACA,YAAII,QAAQ,GAACH,OAAO,GAACZ,eAArB;AAEA,cAAMtB,GAAG,CAACK,gBAAgB,CAAC6B,OAAD,CAAjB,CAAT;AACA,cAAMlC,GAAG,CAACI,cAAc,CAACiC,QAAD,CAAf,CAAT;AACA,cAAMrC,GAAG,CAACE,SAAS,CAACuB,WAAW,CAACW,UAAb,EAAwBC,QAAxB,EAAiCJ,iBAAjC,CAAV,CAAT;AACH;AAEJ;AACA;AACJ;;AAED,OAAO,UAAUK,aAAV,GAAyB;AAC5B,QAAMvC,SAAS,CAACD,aAAa,CAACyC,gBAAf,EAAiC7B,eAAjC,CAAf;AACH","sourcesContent":["import TotalTimeType from './TotalTime.type';\nimport {takeEvery,put,select} from 'redux-saga/effects';\nimport {startTask,startRemainder} from '../task/Task.action';\nimport {startCountDown,updateLastRunSec} from '../totalTime/TotalTime.action';\nimport {GetDate,GetTimeInSeconds} from '../../logic/getDate';\nimport {submitDataStart} from '../submitData/SubmitData.action'\nimport {notify} from '../../components/remainderNotification/RemainderNotification.component'\nfunction* updateCountDown(){\n    var d = new Date(); // for now\n    var hr=d.getHours(); // => 9\n    var min=d.getMinutes(); // =>  30\n    var sec=d.getSeconds(); \n    const {key,countDownProgress,originalTime,lastUpdatedTime}=yield select(state=>state.TotalTimeReducer)\n    const taskReducer=yield select(state=>state.TaskReducer)\n    //console.log(taskReducer)\n    //If the time is 23:59:58, it will save all task. as we are using the key to identify time ofter 00:00:00 key will change, hence breaking the function\n    if(parseInt(hr)===23 && parseInt(min)===59 && parseInt(sec)===58){\n        window.alert('The day is about to end, and a new day will begin, We will Save your progress so far');\n        yield put(submitDataStart())\n        setTimeout(function(){\n            \n    \n        }, 500); \n        window.location.reload(false);\n    }\n    else{\n    let originalTimeLocal=originalTime[key][GetDate()];\n    let seconds=GetTimeInSeconds();\n    yield put(startRemainder(seconds))\n    if(taskReducer.notification!==null){\n        notify(taskReducer.notification)\n    }\n    //updates the time of main timer as well as the tasks\n    if(countDownProgress){\n        if(lastUpdatedTime===null){\n            //console.log('in saga')\n            yield put(updateLastRunSec(seconds))\n            yield put(startCountDown(1))\n            \n            yield put(startTask(taskReducer.activeTask,1,originalTimeLocal))\n        }\n        else{\n            let timeDiff=seconds-lastUpdatedTime;\n            \n            yield put(updateLastRunSec(seconds))\n            yield put(startCountDown(timeDiff))\n            yield put(startTask(taskReducer.activeTask,timeDiff,originalTimeLocal))\n        }\n       \n    }\n    }\n}\n\nexport function* startTaskTime(){\n    yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown)\n}"]},"metadata":{},"sourceType":"module"}