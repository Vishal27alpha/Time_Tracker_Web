{"ast":null,"code":"import BreakButtonType from './BreakButton.type';\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { addBreaktask } from '../task/Task.action';\nimport { setCountDownTrue, pauseCountDown } from '../totalTime/TotalTime.action';\n\nfunction* startBreakInTask({\n  breakName\n}) {\n  let breakButtonSatate = yield select(state => state.BreakButtonReducer);\n  let taskReducer = yield select(state => state.TaskReducer);\n  yield put(addBreaktask(breakName, breakButtonSatate[breakName].color));\n\n  if (breakName !== 'releaseAll' && taskReducer.taskList[breakName].paused === false) {\n    yield put(setCountDownTrue());\n  } else {\n    yield put(pauseCountDown());\n  }\n}\n\nexport function* startBreakSaga() {\n  yield takeEvery(BreakButtonType.START_BREAK, startBreakInTask);\n}","map":{"version":3,"sources":["/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/redux/breakButton/BreakButton.sagas.js"],"names":["BreakButtonType","takeEvery","put","select","addBreaktask","setCountDownTrue","pauseCountDown","startBreakInTask","breakName","breakButtonSatate","state","BreakButtonReducer","taskReducer","TaskReducer","color","taskList","paused","startBreakSaga","START_BREAK"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,oBAA5B;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,MAAtB,QAAmC,oBAAnC;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AACA,SAAQC,gBAAR,EAAyBC,cAAzB,QAA8C,+BAA9C;;AAEA,UAAUC,gBAAV,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAuC;AAC/B,MAAIC,iBAAiB,GAAC,MAAMN,MAAM,CAACO,KAAK,IAAEA,KAAK,CAACC,kBAAd,CAAlC;AACJ,MAAIC,WAAW,GAAC,MAAMT,MAAM,CAACO,KAAK,IAAEA,KAAK,CAACG,WAAd,CAA5B;AACA,QAAMX,GAAG,CAACE,YAAY,CAACI,SAAD,EAAWC,iBAAiB,CAACD,SAAD,CAAjB,CAA6BM,KAAxC,CAAb,CAAT;;AACA,MAAIN,SAAS,KAAG,YAAb,IAA+BI,WAAW,CAACG,QAAZ,CAAqBP,SAArB,EAAgCQ,MAAhC,KAAyC,KAA3E,EAAkF;AAC9E,UAAMd,GAAG,CAACG,gBAAgB,EAAjB,CAAT;AACH,GAFD,MAGI;AACA,UAAMH,GAAG,CAACI,cAAc,EAAf,CAAT;AACH;AAGJ;;AACD,OAAO,UAAUW,cAAV,GAA0B;AAC7B,QAAMhB,SAAS,CAACD,eAAe,CAACkB,WAAjB,EAA6BX,gBAA7B,CAAf;AAEH","sourcesContent":["import BreakButtonType from './BreakButton.type';\nimport {takeEvery,put,select} from 'redux-saga/effects';\nimport {addBreaktask} from '../task/Task.action';\nimport {setCountDownTrue,pauseCountDown} from '../totalTime/TotalTime.action';\n\nfunction* startBreakInTask({breakName}){\n        let breakButtonSatate=yield select(state=>state.BreakButtonReducer);\n    let taskReducer=yield select(state=>state.TaskReducer);\n    yield put(addBreaktask(breakName,breakButtonSatate[breakName].color));\n    if((breakName!=='releaseAll') && (taskReducer.taskList[breakName].paused===false)){\n        yield put(setCountDownTrue());\n    }\n    else{\n        yield put(pauseCountDown());\n    }\n    \n    \n}\nexport function* startBreakSaga(){\n    yield takeEvery(BreakButtonType.START_BREAK,startBreakInTask)\n\n}"]},"metadata":{},"sourceType":"module"}