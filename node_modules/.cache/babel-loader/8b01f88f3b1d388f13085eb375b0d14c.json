{"ast":null,"code":"export const ArrayToSeconds = timeArr => {\n  const hh = parseInt(timeArr[0]) * 10 + parseInt(timeArr[1]);\n  const mm = parseInt(timeArr[2]) * 10 + parseInt(timeArr[3]);\n  const ss = parseInt(timeArr[4]) * 10 + parseInt(timeArr[5]);\n  let seconds = hh * 3600 + mm * 60 + ss; //console.log(seconds)\n\n  return seconds;\n};\nexport const SecondsToArray = timeInSec => {\n  let timeArr = [0, 0, 0, 0, 0, 0];\n\n  if (timeInSec < 0) {\n    timeInSec = timeInSec * -1;\n    timeArr[6] = '-';\n  }\n\n  let totalSeconds = parseInt(timeInSec);\n  let hour = Math.floor(totalSeconds / 3600); //console.log(hour)\n\n  let hourSec = hour * 3600;\n  let minutes = Math.floor((totalSeconds - hourSec) / 60);\n  let seconds = totalSeconds - hourSec - minutes * 60;\n\n  if (hour < 10) {\n    timeArr[1] = hour;\n  } else {\n    let strhour = hour.toString();\n    timeArr[0] = strhour.substr(0, 1);\n    timeArr[1] = strhour.substr(1);\n  }\n\n  if (minutes < 10) {\n    timeArr[3] = minutes;\n  } else {\n    let strMinutes = minutes.toString();\n    timeArr[2] = strMinutes.substr(0, 1);\n    timeArr[3] = strMinutes.substr(1);\n  }\n\n  if (seconds < 10) {\n    timeArr[5] = seconds;\n  } else {\n    let strSeconds = seconds.toString();\n    timeArr[4] = strSeconds.substr(0, 1);\n    timeArr[5] = strSeconds.substr(1);\n  } //console.log(timeArr);\n\n\n  return timeArr;\n}; //console.log(SecondsToArray(-3))\n//console.log(SecondsToArray(ArrayToSeconds([1,1,5,8,0,3])))","map":{"version":3,"sources":["/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/logic/arrayToSeconds.js"],"names":["ArrayToSeconds","timeArr","hh","parseInt","mm","ss","seconds","SecondsToArray","timeInSec","totalSeconds","hour","Math","floor","hourSec","minutes","strhour","toString","substr","strMinutes","strSeconds"],"mappings":"AACA,OAAO,MAAMA,cAAc,GAAEC,OAAD,IAAW;AACnC,QAAMC,EAAE,GAAEC,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,QAAMG,EAAE,GAAED,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,QAAMI,EAAE,GAAEF,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,MAAIK,OAAO,GAAEJ,EAAE,GAAC,IAAJ,GAAWE,EAAE,GAAC,EAAd,GAAmBC,EAA/B,CAJmC,CAKnC;;AACA,SAAOC,OAAP;AACH,CAPM;AASP,OAAO,MAAMC,cAAc,GAAEC,SAAD,IAAa;AACrC,MAAIP,OAAO,GAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CAAZ;;AACA,MAAGO,SAAS,GAAC,CAAb,EAAe;AACXA,IAAAA,SAAS,GAACA,SAAS,GAAC,CAAC,CAArB;AACAP,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAW,GAAX;AACH;;AACD,MAAIQ,YAAY,GAACN,QAAQ,CAACK,SAAD,CAAzB;AACA,MAAIE,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWH,YAAY,GAAC,IAAxB,CAAT,CAPqC,CAQrC;;AACA,MAAII,OAAO,GAACH,IAAI,GAAC,IAAjB;AACA,MAAII,OAAO,GAACH,IAAI,CAACC,KAAL,CAAW,CAACH,YAAY,GAAEI,OAAf,IAAyB,EAApC,CAAZ;AACA,MAAIP,OAAO,GAACG,YAAY,GAAEI,OAAd,GAAwBC,OAAO,GAAC,EAA5C;;AAGA,MAAGJ,IAAI,GAAC,EAAR,EAAW;AACPT,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWS,IAAX;AACH,GAFD,MAGI;AACA,QAAIK,OAAO,GAACL,IAAI,CAACM,QAAL,EAAZ;AACAf,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWc,OAAO,CAACE,MAAR,CAAe,CAAf,EAAiB,CAAjB,CAAX;AACAhB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWc,OAAO,CAACE,MAAR,CAAe,CAAf,CAAX;AACH;;AACD,MAAGH,OAAO,GAAC,EAAX,EAAc;AACVb,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWa,OAAX;AACH,GAFD,MAGI;AACA,QAAII,UAAU,GAACJ,OAAO,CAACE,QAAR,EAAf;AACAf,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWiB,UAAU,CAACD,MAAX,CAAkB,CAAlB,EAAoB,CAApB,CAAX;AACAhB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWiB,UAAU,CAACD,MAAX,CAAkB,CAAlB,CAAX;AACH;;AACD,MAAGX,OAAO,GAAC,EAAX,EAAc;AACVL,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWK,OAAX;AACH,GAFD,MAGI;AACA,QAAIa,UAAU,GAACb,OAAO,CAACU,QAAR,EAAf;AACAf,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWkB,UAAU,CAACF,MAAX,CAAkB,CAAlB,EAAoB,CAApB,CAAX;AACAhB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWkB,UAAU,CAACF,MAAX,CAAkB,CAAlB,CAAX;AACH,GArCoC,CAsCrC;;;AACA,SAAOhB,OAAP;AACH,CAxCM,C,CAyCP;AACA","sourcesContent":["\nexport const ArrayToSeconds=(timeArr)=>{\n    const hh=(parseInt(timeArr[0])*10)+parseInt(timeArr[1]);\n    const mm=(parseInt(timeArr[2])*10)+parseInt(timeArr[3]);\n    const ss=(parseInt(timeArr[4])*10)+parseInt(timeArr[5]);\n    let seconds=(hh*3600)+(mm*60)+(ss);\n    //console.log(seconds)\n    return(seconds)\n}\n\nexport const SecondsToArray=(timeInSec)=>{\n    let timeArr=[0,0,0,0,0,0];\n    if(timeInSec<0){\n        timeInSec=timeInSec*-1;\n        timeArr[6]='-';\n    }\n    let totalSeconds=parseInt(timeInSec);\n    let hour=Math.floor(totalSeconds/3600);\n    //console.log(hour)\n    let hourSec=hour*3600;\n    let minutes=Math.floor((totalSeconds-(hourSec))/60);\n    let seconds=totalSeconds-(hourSec)-(minutes*60);\n    \n    \n    if(hour<10){\n        timeArr[1]=hour;\n    }\n    else{\n        let strhour=hour.toString();\n        timeArr[0]=strhour.substr(0,1);\n        timeArr[1]=strhour.substr(1,);\n    }\n    if(minutes<10){\n        timeArr[3]=minutes;\n    }\n    else{\n        let strMinutes=minutes.toString();\n        timeArr[2]=strMinutes.substr(0,1);\n        timeArr[3]=strMinutes.substr(1,);\n    }\n    if(seconds<10){\n        timeArr[5]=seconds;\n    }\n    else{\n        let strSeconds=seconds.toString();\n        timeArr[4]=strSeconds.substr(0,1);\n        timeArr[5]=strSeconds.substr(1,);\n    }\n    //console.log(timeArr);\n    return timeArr;\n}\n//console.log(SecondsToArray(-3))\n//console.log(SecondsToArray(ArrayToSeconds([1,1,5,8,0,3])))\n\n\n"]},"metadata":{},"sourceType":"module"}