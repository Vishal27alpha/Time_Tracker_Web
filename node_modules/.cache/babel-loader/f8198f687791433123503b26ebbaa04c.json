{"ast":null,"code":"var _jsxFileName = \"/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx\";\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ToDoTaskContainer.style.scss';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport { addTask } from '../../redux/task/Task.action';\nimport { SecondsToArray } from '../../logic/arrayToSeconds';\nimport { GetDate } from '../../logic/getDate';\n\nconst ToDoTaskContainer = () => {\n  const {\n    taskList\n  } = useSelector(state => state.TaskReducer);\n  const {\n    key,\n    totalTime\n  } = useSelector(state => state.TotalTimeReducer);\n  const dispatch = useDispatch();\n  const [taskName, setTaskName] = useState(); //console.log(taskList)\n\n  const setTask = event => {\n    setTaskName(event.target.value);\n  };\n\n  const dispatchAddTask = () => {\n    if (taskName) {\n      dispatch(addTask(taskName));\n      setTaskName('');\n      document.getElementById('outlined-basic').blur();\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatchAddTask();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, totalTime[key] !== undefined && totalTime[key][GetDate()] ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toDoMainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"headingToDo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, \"Task List\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addTaskinpputContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"addTaskContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: taskName,\n    onChange: setTask,\n    className: \"addTaskText\",\n    id: \"outlined-basic\",\n    placeholder: \"Add Task\",\n    variant: \"outlined\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    className: `saveTaskBtn-${taskName ? 'enabled' : 'disabled'}`,\n    startIcon: /*#__PURE__*/React.createElement(CheckIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 32\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addedTaskListContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, Object.keys(taskList).map(key => {\n    return taskList[key].isCompleted ? '' : taskList[key].type === 'remainder' ? '' : /*#__PURE__*/React.createElement(AddedTask, {\n      key: key,\n      type: taskList[key].type,\n      completed: taskList[key].isCompleted,\n      bgColor: taskList[key].color,\n      taskName: key,\n      paused: taskList[key].paused,\n      percentage: taskList[key].percentage,\n      time: SecondsToArray(taskList[key].time),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 26\n      }\n    });\n  }))) : '');\n};\n\nexport default ToDoTaskContainer;","map":{"version":3,"sources":["/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx"],"names":["React","useState","useSelector","useDispatch","Button","CheckIcon","AddedTask","addTask","SecondsToArray","GetDate","ToDoTaskContainer","taskList","state","TaskReducer","key","totalTime","TotalTimeReducer","dispatch","taskName","setTaskName","setTask","event","target","value","dispatchAddTask","document","getElementById","blur","handleSubmit","preventDefault","undefined","Object","keys","map","isCompleted","type","color","paused","percentage","time"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport './ToDoTaskContainer.style.scss'\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport {addTask} from '../../redux/task/Task.action';\nimport {SecondsToArray} from '../../logic/arrayToSeconds'\nimport {GetDate} from '../../logic/getDate';\nconst ToDoTaskContainer=()=>{\n\n    const {taskList}=useSelector(state=>state.TaskReducer);\n    const {key,totalTime}=useSelector(state=>state.TotalTimeReducer);\n    const dispatch=useDispatch();\n    const[taskName,setTaskName]=useState();\n    //console.log(taskList)\n    const setTask=(event)=>{\n        setTaskName(event.target.value);\n    }\n    const dispatchAddTask=()=>{\n        if(taskName){\n            dispatch(addTask(taskName));\n            setTaskName('');\n            document.getElementById('outlined-basic').blur();\n        }\n        \n    }\n\n    const handleSubmit=(event)=>{\n        event.preventDefault();\n        dispatchAddTask();\n    }\n  \n    return(\n        <React.Fragment>\n        {totalTime[key]!==undefined && totalTime[key][GetDate()]?\n        <div className='toDoMainContainer'>\n            <span className='headingToDo'>Task List</span>\n            <div className='addTaskinpputContainer'>\n                <form onSubmit={handleSubmit} className='addTaskContainer'>\n                    \n                    <input value={taskName} onChange={setTask} className='addTaskText' id=\"outlined-basic\" placeholder=\"Add Task\" variant=\"outlined\" color='primary'></input>\n                   \n                    <Button\n                    variant=\"contained\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    className={`saveTaskBtn-${taskName?'enabled':'disabled'}`}\n                    startIcon={<CheckIcon />}                    \n                    ></Button>\n                    \n                    <hr></hr>\n                </form>\n            </div>\n            <div className='addedTaskListContainer'>\n\n                {Object.keys(taskList).map((key)=>\n                    {   return(\n                        taskList[key].isCompleted?'':taskList[key].type==='remainder'?'':\n                        (<AddedTask key={key} type={taskList[key].type} completed={taskList[key].isCompleted} bgColor={taskList[key].color} taskName={key} paused={taskList[key].paused} percentage={taskList[key].percentage} time={SecondsToArray(taskList[key].time)}/>)\n                        )\n                    }    \n                    )\n                }          \n            </div>\n\n        </div>\n        :''}\n        </React.Fragment>\n    )\n}\nexport default ToDoTaskContainer;"]},"metadata":{},"sourceType":"module"}