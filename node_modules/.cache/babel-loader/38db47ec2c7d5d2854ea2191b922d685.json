{"ast":null,"code":"import TaskType from './Task.type';\nconst INITIAL_STATUS = {\n  taskList: {},\n  activeTask: null,\n  notification: null,\n  remainderLastUpdate: null\n};\nexport const TaskReducer = (state = INITIAL_STATUS, action) => {\n  switch (action.type) {\n    case TaskType.ADD_TASK:\n      if (state.taskList[action.taskName] === undefined) {\n        let taskData = {\n          time: 0,\n          paused: true,\n          isCompleted: false,\n          color: 'rgb(239, 68, 11)',\n          percentage: 0,\n          type: 'task'\n        };\n        state.taskList[action.taskName] = taskData;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.REMOVE_TASK:\n      delete state.taskList[action.taskName];\n\n      if (state.activeTask === action.taskName) {\n        state.activeTask = null;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask,\n        notification: null\n      };\n\n    case TaskType.PAUSE_TASK:\n      state.taskList[action.taskName].paused = true;\n      state.activeTask = null;\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.START_TASK:\n      for (var key in state.taskList) {\n        state.taskList[key].paused = true;\n      }\n\n      state.taskList[action.taskName].paused = false;\n\n      if (action.seconds !== undefined && action.totalTime !== undefined && state.taskList[action.taskName].type !== 'remainder') {\n        state.taskList[action.taskName].time = parseInt(state.taskList[action.taskName].time) + parseInt(action.seconds); //console.log(action.totalTime);\n        //console.log(state.taskList[action.taskName].time)\n\n        state.taskList[action.taskName].percentage = (state.taskList[action.taskName].time / parseInt(action.totalTime) * parseInt(100)).toFixed(1);\n      }\n\n      state.activeTask = action.taskName;\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.COMPLETED_TASK:\n      state.taskList[action.taskName].isCompleted = true;\n\n      if (state.activeTask === action.taskName) {\n        state.activeTask = null;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.ADD_BREAK_TASK:\n      for (var k in state.taskList) {\n        //console.log(key)\n        if (k !== action.taskName) {\n          state.taskList[k].paused = true;\n        } //console.log(state.taskList[key].pasued)\n\n      }\n\n      if (action.taskName !== 'releaseAll') {\n        //console.log(state.taskList)\n        if (state.taskList[action.taskName] === undefined) {\n          let taskData = {\n            time: 0,\n            paused: false,\n            isCompleted: false,\n            color: action.color,\n            percentage: 0,\n            type: 'break'\n          };\n          state.taskList[action.taskName] = taskData;\n          state.activeTask = action.taskName;\n        } else {\n          //console.log('********************************************************')\n          //console.log(state.taskList[action.taskName].paused)\n          if (!state.taskList[action.taskName].paused) {\n            state.taskList[action.taskName].paused = true;\n            state.activeTask = null;\n          } else {\n            state.taskList[action.taskName].paused = false;\n            state.activeTask = action.taskName;\n          }\n        }\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.REMOVE_ALL_TASK:\n      return { ...state,\n        taskList: {},\n        activeTask: null,\n        notification: null\n      };\n\n    case TaskType.COMPLETE_ALL_TASK:\n      for (var k1 in state.taskList) {\n        state.taskList[k1].isCompleted = true;\n      } //console.log(state.taskList[k1])\n\n\n      return { ...state,\n        activeTask: null,\n        taskList: { ...state.taskList\n        },\n        notification: null\n      };\n\n    case TaskType.ADD_REMAINDER:\n      if (state.taskList[action.remainderName] === undefined) {\n        let remainderData = {\n          time: action.time - Math.floor(new Date() / 1000),\n          isCompleted: false,\n          color: 'rgb(6, 125, 38)',\n          percentage: 100,\n          timeRemaining: action.time - Math.floor(new Date() / 1000),\n          repeat: action.repeat,\n          type: 'remainder'\n        };\n        state.taskList[action.remainderName] = remainderData;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.START_REMAINDER:\n      state.notification = null;\n      let timeDiff = 0;\n\n      if (state.remainderLastUpdate === null) {\n        state.remainderLastUpdate = action.seconds;\n        timeDiff = 1;\n      } else {\n        timeDiff = action.seconds - state.remainderLastUpdate;\n        state.remainderLastUpdate = action.seconds;\n      }\n\n      for (var key in state.taskList) {\n        if (state.taskList[key].type === 'remainder' && state.taskList[key].isCompleted === false) {\n          state.taskList[key].timeRemaining = parseInt(state.taskList[key].timeRemaining) - parseInt(timeDiff);\n\n          if (state.taskList[key].timeRemaining <= 0 && state.taskList[key].repeat === false) {\n            state.taskList[key].isCompleted = true;\n            state.notification = key;\n          } else if (state.taskList[key].timeRemaining <= 0 && state.taskList[key].repeat === true) {\n            state.notification = key;\n            state.taskList[key].timeRemaining = state.taskList[key].time;\n          }\n\n          state.taskList[key].percentage = (state.taskList[key].timeRemaining / state.taskList[key].time * parseInt(100)).toFixed(1);\n        }\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        notification: state.notification,\n        remainderLastUpdate: state.remainderLastUpdate\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/vishal/Desktop/timelogger-master/timekeeper-frontend/src/redux/task/Task.reducer.js"],"names":["TaskType","INITIAL_STATUS","taskList","activeTask","notification","remainderLastUpdate","TaskReducer","state","action","type","ADD_TASK","taskName","undefined","taskData","time","paused","isCompleted","color","percentage","REMOVE_TASK","PAUSE_TASK","START_TASK","key","seconds","totalTime","parseInt","toFixed","COMPLETED_TASK","ADD_BREAK_TASK","k","REMOVE_ALL_TASK","COMPLETE_ALL_TASK","k1","ADD_REMAINDER","remainderName","remainderData","Math","floor","Date","timeRemaining","repeat","START_REMAINDER","timeDiff"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAC;AACjBC,EAAAA,QAAQ,EAAC,EADQ;AAEjBC,EAAAA,UAAU,EAAC,IAFM;AAGjBC,EAAAA,YAAY,EAAC,IAHI;AAIjBC,EAAAA,mBAAmB,EAAC;AAJH,CAArB;AAQA,OAAO,MAAMC,WAAW,GAAC,CAACC,KAAK,GAACN,cAAP,EAAsBO,MAAtB,KAA+B;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,QAAQ,CAACU,QAAd;AACI,UAAGH,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,MAAkCC,SAArC,EAA+C;AAC3C,YAAIC,QAAQ,GAAC;AACTC,UAAAA,IAAI,EAAC,CADI;AAETC,UAAAA,MAAM,EAAC,IAFE;AAGTC,UAAAA,WAAW,EAAC,KAHH;AAITC,UAAAA,KAAK,EAAC,kBAJG;AAKTC,UAAAA,UAAU,EAAC,CALF;AAMTT,UAAAA,IAAI,EAAC;AANI,SAAb;AAQAF,QAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,IAAgCE,QAAhC;AACH;;AACD,aAAM,EACF,GAAGN,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV;AAFP,OAAN;;AAKJ,SAAKF,QAAQ,CAACmB,WAAd;AACI,aAAOZ,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,CAAP;;AACA,UAAGJ,KAAK,CAACJ,UAAN,KAAmBK,MAAM,CAACG,QAA7B,EAAsC;AAClCJ,QAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACH;;AACD,aAAM,EACF,GAAGI,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFC,QAAAA,UAAU,EAACI,KAAK,CAACJ,UAHf;AAIFC,QAAAA,YAAY,EAAC;AAJX,OAAN;;AAMJ,SAAKJ,QAAQ,CAACoB,UAAd;AACIb,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,IAAvC;AACAR,MAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACA,aAAM,EACF,GAAGI,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFC,QAAAA,UAAU,EAACI,KAAK,CAACJ;AAHf,OAAN;;AAKJ,SAAKH,QAAQ,CAACqB,UAAd;AACI,WAAI,IAAIC,GAAR,IAAef,KAAK,CAACL,QAArB,EAA8B;AAC1BK,QAAAA,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBP,MAApB,GAA2B,IAA3B;AACH;;AACDR,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,KAAvC;;AACA,UAAGP,MAAM,CAACe,OAAP,KAAiBX,SAAjB,IAA8BJ,MAAM,CAACgB,SAAP,KAAmBZ,SAAjD,IAA8DL,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCF,IAAhC,KAAuC,WAAxG,EAAoH;AAEhHF,QAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCG,IAAhC,GAAqCW,QAAQ,CAAClB,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCG,IAAjC,CAAR,GAA+CW,QAAQ,CAACjB,MAAM,CAACe,OAAR,CAA5F,CAFgH,CAGhH;AACA;;AAEAhB,QAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCO,UAAhC,GAA2C,CAAGX,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCG,IAAjC,GAAwCW,QAAQ,CAACjB,MAAM,CAACgB,SAAR,CAAjD,GAAsEC,QAAQ,CAAC,GAAD,CAA/E,EAAsFC,OAAtF,CAA8F,CAA9F,CAA3C;AACH;;AACDnB,MAAAA,KAAK,CAACJ,UAAN,GAAiBK,MAAM,CAACG,QAAxB;AACA,aAAM,EACF,GAAGJ,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFC,QAAAA,UAAU,EAACI,KAAK,CAACJ;AAHf,OAAN;;AAKJ,SAAKH,QAAQ,CAAC2B,cAAd;AACIpB,MAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCK,WAAhC,GAA4C,IAA5C;;AACA,UAAGT,KAAK,CAACJ,UAAN,KAAmBK,MAAM,CAACG,QAA7B,EAAsC;AAClCJ,QAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACH;;AACD,aAAM,EACF,GAAGI,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFC,QAAAA,UAAU,EAACI,KAAK,CAACJ;AAHf,OAAN;;AAKJ,SAAKH,QAAQ,CAAC4B,cAAd;AACI,WAAI,IAAIC,CAAR,IAAatB,KAAK,CAACL,QAAnB,EAA4B;AACxB;AACA,YAAG2B,CAAC,KAAGrB,MAAM,CAACG,QAAd,EAAuB;AACnBJ,UAAAA,KAAK,CAACL,QAAN,CAAe2B,CAAf,EAAkBd,MAAlB,GAAyB,IAAzB;AACH,SAJuB,CAKxB;;AACH;;AACD,UAAGP,MAAM,CAACG,QAAP,KAAkB,YAArB,EAAkC;AAE9B;AACA,YAAIJ,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,MAAkCC,SAAtC,EAAiD;AACjD,cAAIC,QAAQ,GAAC;AACTC,YAAAA,IAAI,EAAC,CADI;AAETC,YAAAA,MAAM,EAAC,KAFE;AAGTC,YAAAA,WAAW,EAAC,KAHH;AAITC,YAAAA,KAAK,EAACT,MAAM,CAACS,KAJJ;AAKTC,YAAAA,UAAU,EAAC,CALF;AAMTT,YAAAA,IAAI,EAAC;AANI,WAAb;AAQAF,UAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,IAAgCE,QAAhC;AACAN,UAAAA,KAAK,CAACJ,UAAN,GAAiBK,MAAM,CAACG,QAAxB;AACC,SAXD,MAYI;AAEA;AACA;AACA,cAAG,CAAEJ,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCI,MAArC,EAA6C;AAEzCR,YAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,IAAvC;AACAR,YAAAA,KAAK,CAACJ,UAAN,GAAiB,IAAjB;AACH,WAJD,MAKI;AAEAI,YAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,KAAvC;AACAR,YAAAA,KAAK,CAACJ,UAAN,GAAiBK,MAAM,CAACG,QAAxB;AACH;AAEJ;AAEJ;;AAED,aAAM,EACF,GAAGJ,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFC,QAAAA,UAAU,EAACI,KAAK,CAACJ;AAHf,OAAN;;AAKA,SAAKH,QAAQ,CAAC8B,eAAd;AACI,aAAM,EACF,GAAGvB,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAFP;AAGFC,QAAAA,UAAU,EAAC,IAHT;AAIFC,QAAAA,YAAY,EAAC;AAJX,OAAN;;AAMJ,SAAKJ,QAAQ,CAAC+B,iBAAd;AACI,WAAI,IAAIC,EAAR,IAAczB,KAAK,CAACL,QAApB,EAA6B;AACzBK,QAAAA,KAAK,CAACL,QAAN,CAAe8B,EAAf,EAAmBhB,WAAnB,GAA+B,IAA/B;AACH,OAHL,CAII;;;AACA,aAAM,EACF,GAAGT,KADD;AAEFJ,QAAAA,UAAU,EAAC,IAFT;AAGFD,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAHP;AAIFE,QAAAA,YAAY,EAAC;AAJX,OAAN;;AAMJ,SAAKJ,QAAQ,CAACiC,aAAd;AACI,UAAG1B,KAAK,CAACL,QAAN,CAAeM,MAAM,CAAC0B,aAAtB,MAAuCtB,SAA1C,EAAoD;AAChD,YAAIuB,aAAa,GAAC;AACdrB,UAAAA,IAAI,EAACN,MAAM,CAACM,IAAP,GAAYsB,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAW,IAAtB,CADH;AAEdtB,UAAAA,WAAW,EAAC,KAFE;AAGdC,UAAAA,KAAK,EAAC,iBAHQ;AAIdC,UAAAA,UAAU,EAAC,GAJG;AAKdqB,UAAAA,aAAa,EAAC/B,MAAM,CAACM,IAAP,GAAYsB,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAW,IAAtB,CALZ;AAMdE,UAAAA,MAAM,EAAChC,MAAM,CAACgC,MANA;AAOd/B,UAAAA,IAAI,EAAC;AAPS,SAAlB;AAUAF,QAAAA,KAAK,CAACL,QAAN,CAAeM,MAAM,CAAC0B,aAAtB,IAAqCC,aAArC;AACH;;AACD,aAAM,EACF,GAAG5B,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV;AAFP,OAAN;;AAKJ,SAAKF,QAAQ,CAACyC,eAAd;AACIlC,MAAAA,KAAK,CAACH,YAAN,GAAmB,IAAnB;AACA,UAAIsC,QAAQ,GAAC,CAAb;;AACA,UAAGnC,KAAK,CAACF,mBAAN,KAA4B,IAA/B,EAAoC;AAChCE,QAAAA,KAAK,CAACF,mBAAN,GAA0BG,MAAM,CAACe,OAAjC;AACAmB,QAAAA,QAAQ,GAAC,CAAT;AACH,OAHD,MAII;AACAA,QAAAA,QAAQ,GAAClC,MAAM,CAACe,OAAP,GAAehB,KAAK,CAACF,mBAA9B;AACAE,QAAAA,KAAK,CAACF,mBAAN,GAA0BG,MAAM,CAACe,OAAjC;AACH;;AACD,WAAI,IAAID,GAAR,IAAef,KAAK,CAACL,QAArB,EAA8B;AAEvB,YAAGK,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBb,IAApB,KAA2B,WAA3B,IAA0CF,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBN,WAApB,KAAkC,KAA/E,EAAqF;AAChFT,UAAAA,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAApB,GAAkCd,QAAQ,CAAClB,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAArB,CAAR,GAA4Cd,QAAQ,CAACiB,QAAD,CAAtF;;AACA,cAAGnC,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAApB,IAAmC,CAAnC,IAAwChC,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBkB,MAApB,KAA6B,KAAxE,EAA8E;AAC1EjC,YAAAA,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBN,WAApB,GAAgC,IAAhC;AACAT,YAAAA,KAAK,CAACH,YAAN,GAAmBkB,GAAnB;AACH,WAHD,MAIK,IAAGf,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAApB,IAAmC,CAAnC,IAAwChC,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBkB,MAApB,KAA6B,IAAxE,EAA6E;AAC9EjC,YAAAA,KAAK,CAACH,YAAN,GAAmBkB,GAAnB;AACAf,YAAAA,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAApB,GAAkChC,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBR,IAAtD;AACH;;AACDP,UAAAA,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBJ,UAApB,GAA+B,CAAGX,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBiB,aAArB,GAAqChC,KAAK,CAACL,QAAN,CAAeoB,GAAf,EAAoBR,IAA1D,GAAiEW,QAAQ,CAAC,GAAD,CAA1E,EAAiFC,OAAjF,CAAyF,CAAzF,CAA/B;AACH;AAER;;AACD,aAAM,EACF,GAAGnB,KADD;AAEFL,QAAAA,QAAQ,EAAC,EAAC,GAAGK,KAAK,CAACL;AAAV,SAFP;AAGFE,QAAAA,YAAY,EAAEG,KAAK,CAACH,YAHlB;AAIFC,QAAAA,mBAAmB,EAACE,KAAK,CAACF;AAJxB,OAAN;;AAMR;AACI,aAAOE,KAAP;AAxLR;AA0LH,CA3LM","sourcesContent":["import TaskType from './Task.type';\n\nconst INITIAL_STATUS={\n    taskList:{},\n    activeTask:null,\n    notification:null,\n    remainderLastUpdate:null,\n}\n\n\nexport const TaskReducer=(state=INITIAL_STATUS,action)=>{\n    switch(action.type){\n        case TaskType.ADD_TASK:\n            if(state.taskList[action.taskName]===undefined){\n                let taskData={\n                    time:0,\n                    paused:true,\n                    isCompleted:false,\n                    color:'rgb(239, 68, 11)',\n                    percentage:0,\n                    type:'task',\n                }\n                state.taskList[action.taskName]=taskData;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                \n            }\n        case TaskType.REMOVE_TASK:\n            delete state.taskList[action.taskName];\n            if(state.activeTask===action.taskName){\n                state.activeTask=null;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n                notification:null\n            }\n        case TaskType.PAUSE_TASK:\n            state.taskList[action.taskName].paused=true;\n            state.activeTask=null;\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.START_TASK:\n            for(var key in state.taskList){\n                state.taskList[key].paused=true;\n            }\n            state.taskList[action.taskName].paused=false;\n            if(action.seconds!==undefined && action.totalTime!==undefined && state.taskList[action.taskName].type!=='remainder'){\n\n                state.taskList[action.taskName].time=parseInt(state.taskList[action.taskName].time)+parseInt(action.seconds);\n                //console.log(action.totalTime);\n                //console.log(state.taskList[action.taskName].time)\n                \n                state.taskList[action.taskName].percentage=(((state.taskList[action.taskName].time)/(parseInt(action.totalTime)))*parseInt(100)).toFixed(1);\n            }\n            state.activeTask=action.taskName;\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.COMPLETED_TASK:\n            state.taskList[action.taskName].isCompleted=true;\n            if(state.activeTask===action.taskName){\n                state.activeTask=null;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.ADD_BREAK_TASK:\n            for(var k in state.taskList){\n                //console.log(key)\n                if(k!==action.taskName){\n                    state.taskList[k].paused=true;\n                }\n                //console.log(state.taskList[key].pasued)\n            }\n            if(action.taskName!=='releaseAll'){\n                \n                //console.log(state.taskList)\n                if((state.taskList[action.taskName]===undefined)){\n                let taskData={\n                    time:0,\n                    paused:false,\n                    isCompleted:false,\n                    color:action.color,\n                    percentage:0,\n                    type:'break',\n                }\n                state.taskList[action.taskName]=taskData;\n                state.activeTask=action.taskName\n                }\n                else{\n\n                    //console.log('********************************************************')\n                    //console.log(state.taskList[action.taskName].paused)\n                    if(!(state.taskList[action.taskName].paused)){\n                        \n                        state.taskList[action.taskName].paused=true;\n                        state.activeTask=null\n                    }\n                    else{\n                        \n                        state.taskList[action.taskName].paused=false;\n                        state.activeTask=action.taskName\n                    }\n\n                }\n\n            }\n            \n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n            case TaskType.REMOVE_ALL_TASK:\n                return{\n                    ...state,\n                    taskList:{},\n                    activeTask:null,\n                    notification:null\n                }\n            case TaskType.COMPLETE_ALL_TASK:\n                for(var k1 in state.taskList){\n                    state.taskList[k1].isCompleted=true;\n                }\n                //console.log(state.taskList[k1])\n                return{\n                    ...state,\n                    activeTask:null,\n                    taskList:{...state.taskList},\n                    notification:null\n                }\n            case TaskType.ADD_REMAINDER:\n                if(state.taskList[action.remainderName]===undefined){\n                    let remainderData={\n                        time:action.time-Math.floor(new Date()/1000),\n                        isCompleted:false,\n                        color:'rgb(6, 125, 38)',\n                        percentage:100,\n                        timeRemaining:action.time-Math.floor(new Date()/1000),\n                        repeat:action.repeat,\n                        type:'remainder',\n                        \n                    }\n                    state.taskList[action.remainderName]=remainderData;\n                }\n                return{\n                    ...state,\n                    taskList:{...state.taskList},\n                    \n                }\n            case TaskType.START_REMAINDER:\n                state.notification=null;\n                let timeDiff=0;\n                if(state.remainderLastUpdate===null){\n                    state.remainderLastUpdate=action.seconds;\n                    timeDiff=1\n                }\n                else{\n                    timeDiff=action.seconds-state.remainderLastUpdate;\n                    state.remainderLastUpdate=action.seconds;\n                }\n                for(var key in state.taskList){\n                       \n                       if(state.taskList[key].type==='remainder' && state.taskList[key].isCompleted===false){\n                            state.taskList[key].timeRemaining=parseInt(state.taskList[key].timeRemaining)-parseInt(timeDiff);\n                            if(state.taskList[key].timeRemaining<=0 && state.taskList[key].repeat===false){\n                                state.taskList[key].isCompleted=true;\n                                state.notification=key;\n                            }\n                            else if(state.taskList[key].timeRemaining<=0 && state.taskList[key].repeat===true){\n                                state.notification=key;\n                                state.taskList[key].timeRemaining=state.taskList[key].time\n                            }\n                            state.taskList[key].percentage=(((state.taskList[key].timeRemaining)/(state.taskList[key].time))*parseInt(100)).toFixed(1);\n                        }\n                    \n                }\n                return{\n                    ...state,\n                    taskList:{...state.taskList},\n                    notification: state.notification,\n                    remainderLastUpdate:state.remainderLastUpdate\n                }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}